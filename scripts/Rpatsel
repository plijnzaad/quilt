#!/usr/bin/env perl
# generate rasmol commands for displaying patches from patch file
# N in file FILE, possibly interpreting letter X as STRING

# It writes, to stdout, a rasmol expression corresponding to patch with
# rank number N, and also defines a set, pN, for easier selection and
# coloring, as well as the first atom of the patch, lN, for easy labeling.

# an examle, in bash, for generating display scripts for large numbers of
# files, consider something like this:

# declare -a col; col[0]=red;  col[1]=orange;  col[2]=yellow
# for i in  pat/01[1234]*.pat; do 
#     for j in 0 1 2; do 
#        Rpatsel $i $j
#        echo "select p$j"
#        echo "color ${col[$j]}"
#     done > rsml/`basename $i .pat`.rsml
#  done

use File::Basename;



## this is all a bit hairy, sorry.

use Getopt::Std;
$options='hm';				# h: help; m: multiple chains in input

$Usage="Usage: Rpatsel [-$options] FILE N [X=STRING]";

sub die {
  print "echo $_[0]\n";
  exit 1;
}

&die($Usage) unless getopts($options);
&die($Usage) if $opt_h;

&die($Usage) unless @ARGV >= 2;

$file=shift;
$nr=shift;

# die "can't parse $file\n" unless $file =~ /(....)\.pat$/;
# $code=$1;
# &make_table($code);			# for translating

($unknown, $known) = split(/=/, $cofactor) if ($cofactor=shift);

&die("$nr: malformed number") unless $nr =~ /^\d+$/;

open(FILE, $file) || &die("$file: $!");

# undo any previous labeling
# print "~label\n";
# print "select\ncolor blue\n";

$comment="not found\n";

while(<FILE>) {
  next until /^surface \'[Ca][Sf]/o;	# "surface 'CS ':"/"surface 'after ..."
  last;					#
}

while(<FILE>) { 
  last if /^surface/;			# next type of surface
  next until /^# $nr/o;		# skip unwanted patches
  last;
}

s/^# \d+,//;
s/patches/faces/;

my  ($name,$path,$suffix) = fileparse($file,"\.pat");

my ($rank, $atoms, $faces, $points, $area) = /# (\d+) (\d+) atoms (\d+) faces (\d+) points area ([0-9.]+)/;
$comment=sprintf "struc %6s, patch %2d, area %6.1f, %3d atoms\n"
  , $name, $rank, $area, $atoms;
            

print "select none\n" unless $opt_a;	# empty the selection, unless a

my $firstatom;
my $n = 0;

while(<FILE>) { 
  next if /^% /;
  last if /^#/ || /^$/;
  s/^ //;
  # deal with 'funny' characters such as 'f' (FMN), 'h' (HEM) or 'X' (unknown)
  if ( $cofactor ) {
    ### NO chain ID's in input:
     while ( s/($unknown)(.)(-?\d+).@([ A-Z0-9*\']+)(=[0-9ab-]+)?;// ) { 
    ### chain ID's in input   
#    while ( s/($unknown) (.)(-?\d+).@([ A-Z0-9*\']+)(=[0-9ab-]+)?;// ) {
      #         name   chain brknr inscode atom      area + ss
      $name="\L$known$2.$4";
      $name =~ tr/ //d;
      print "select selected or $name\n";
    }					# 
  }					# 
  chop;					# no newline

###  $1=chain, $2=resnr, $3=atom $4= area + secstr.
    ### chain ID's in input:
#   if($opt_m) {				# '
#     $n=( s/[A-Z0-9] (.)(-?\d+).@([ A-Z0-9*']+)(=[0-9ab-]+)?;/*$2$1.$3,/g );
#   } else {				### no chainIDs'
#     $n=( s/[A-Z0-9](.)(-?\d+).@([ A-Z0-9*']+)(=[0-9ab-]+)?;/*$2$1.$3,/g ); #'
#   }					# \'
###  $1=chain, $2=resnr, $3=atom $4= area + secstr.
#  $n=( s/[A-Z0-9] *([A-Z])?(-?\d+).@([ A-Z0-9*']+)(=[0-9ab-]+)?;/*$2$1.$3,/g ); #'
  @all = split(';');
#  my @atoms;
  foreach (@all) {
###  $1=chain, $2=resnr, $3=atom $4= area + secstr.
    s/[A-Z0-9] *([A-Z])?(-?\d+).@([ A-Z0-9*\']+)(=[0-9ab-]+)?/*$2$1.$3/;
    $_ = "\L$_";
    s/\s//g;				# no spaces
    $firstatom = $_ if $n++ ==0;
  }

  print "select selected or ", join(',',@all), "\n" if $n>0;
  $found++;
} # while
print "define p$nr selected\n";		# make available as a set
print "select $firstatom\ndefine l$nr selected\n";

$msg= sprintf("echo %s", $found ? $comment : "patch # $nr not found\n");
    print $msg;
warn $msg;

# sub translate {				# not used
#   local ($_, @atoms, $nr, $at)=@_;
# 
#   @atoms=split(',');
#   foreach ( @atoms ) { 
#     ($nr,$at)=(/\*(\d+).(.*)$/);
#     $_= "*$table{$nr}.$at,";
#   }
#   $_=join('', @atoms);
# }
